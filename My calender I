/*You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a double booking.

A double booking happens when two events have some non-empty intersection (i.e., some moment is common to both events.).

The event can be represented as a pair of integers startTime and endTime that represents a booking on the half-open interval [startTime, endTime), the range of real numbers x such that startTime <= x < endTime.

Implement the MyCalendar class:

MyCalendar() Initializes the calendar object.
boolean book(int startTime, int endTime) Returns true if the event can be added to the calendar successfully without causing a double booking. Otherwise, return false and do not add the event to the calendar.
 

Example 1:

Input
["MyCalendar", "book", "book", "book"]
[[], [10, 20], [15, 25], [20, 30]]
Output
[null, true, false, true]

Explanation
MyCalendar myCalendar = new MyCalendar();
myCalendar.book(10, 20); // return True
myCalendar.book(15, 25); // return False, It can not be booked because time 15 is already booked by another event.
myCalendar.book(20, 30); // return True, The event can be booked, as the first event takes every time less than 20, but not including 20.
 

Constraints:

0 <= start < end <= 109
At most 1000 calls will be made to book.*/
class MyCalendar {
    private TreeNode root = null;

    public MyCalendar() {}
    
    public boolean book(final int start, final int end) {
        if(root == null) {
            root = new TreeNode(start, end);
            return true;
        }

        return this.insert(this.root, start, end);
    }

    private boolean insert(final TreeNode root, final int start, final int end) {
        if(end <= root.start) {
            if(root.left == null) {
                root.left = new TreeNode(start, end);
                return true;
            } else {
                return insert(root.left, start, end);
            }
        } else if(start >= root.end) {
            if(root.right == null) {
                root.right = new TreeNode(start, end);
                return true;
            } else {
                return insert(root.right, start, end);
            }
        }

        return false;
    }

    private final class TreeNode {
        public final int start;
        public final int end;
        public TreeNode left;
        public TreeNode right;

        public TreeNode(final int start, final int end) {
            this.start = start;
            this.end = end;
        }
    }
}

/**
 * Your MyCalendar object will be instantiated and called as such:
 * MyCalendar obj = new MyCalendar();
 * boolean param_1 = obj.book(start,end);
 */
